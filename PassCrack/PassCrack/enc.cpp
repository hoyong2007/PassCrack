#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

char key1[128] = {
	0x5A,0x6D,0x36,0x1B,0x0D,0x06,0x03,0x41,
	0x60,0x30,0x18,0x4C,0x66,0x33,0x59,0x2C,
	0x56,0x2B,0x15,0x4A,0x65,0x72,0x39,0x1C,
	0x4E,0x67,0x73,0x79,0x3C,0x5E,0x6F,0x37,

	0x5B,0x2D,0x16,0x0B,0x05,0x42,0x21,0x50,
	0x28,0x54,0x2A,0x55,0x6A,0x75,0x7A,0x7D,
	0x3E,0x5F,0x2F,0x17,0x4B,0x25,0x52,0x29,
	0x14,0x0A,0x45,0x62,0x31,0x58,0x6C,0x76,

	0x3B,0x1D,0x0E,0x47,0x63,0x71,0x78,0x7C,
	0x7E,0x7F,0x3F,0x1F,0x0F,0x07,0x43,0x61,
	0x70,0x38,0x5C,0x6E,0x77,0x7B,0x3D,0x1E,
	0x4F,0x27,0x53,0x69,0x34,0x1A,0x4D,0x26,

	0x13,0x49,0x24,0x12,0x09,0x04,0x02,0x01,
	0x40,0x20,0x10,0x08,0x44,0x22,0x11,0x48,
	0x64,0x32,0x19,0x0C,0x46,0x23,0x51,0x68,
	0x74,0x3A,0x5D,0x2E,0x57,0x6B,0x35,0x5A
};

char key2[128] = {
	0x00,0x86,0x0D,0x8B,0x1A,0x9C,0x17,0x91,
	0x34,0xB2,0x39,0xBF,0x2E,0xA8,0x23,0xA5,
	0x68,0xEE,0x65,0xE3,0x72,0xF4,0x7F,0xF9,
	0x5C,0xDA,0x51,0xD7,0x46,0xC0,0x4B,0xCD,

	0xD0,0x56,0xDD,0x5B,0xCA,0x4C,0xC7,0x41,
	0xE4,0x62,0xE9,0x6F,0xFE,0x78,0xF3,0x75,
	0xB8,0x3E,0xB5,0x33,0xA2,0x24,0xAF,0x29,
	0x8C,0x0A,0x81,0x07,0x96,0x10,0x9B,0x1D,

	0xA1,0x27,0xAC,0x2A,0xBB,0x3D,0xB6,0x30,
	0x95,0x13,0x98,0x1E,0x8F,0x09,0x82,0x04,
	0xC9,0x4F,0xC4,0x42,0xD3,0x55,0xDE,0x58,
	0xFD,0x7B,0xF0,0x76,0xE7,0x61,0xEA,0x6C,

	0x71,0xF7,0x7C,0xFA,0x6B,0xED,0x66,0xE0,
	0x45,0xC3,0x48,0xCE,0x5F,0xD9,0x52,0xD4,
	0x19,0x9F,0x14,0x92,0x03,0x85,0x0E,0x88,
	0x2D,0xAB,0x20,0xA6,0x37,0xB1,0x3A,0xBC
};


void crypt(char *s, char *es, int len)
{
	char tmp[256];
	char enc_msg[128];

	for (int i = 0; i<128; i++)
	{
		tmp[i] = es[i] ^ key1[i];
	}

	for (int i = 0; i<128; i++)
	{
		tmp[i] = tmp[i] ^ s[i];
	}

	//tmp == Enc_msg and Save ENC_msg here
	for (int i = 0; i<128; i++)
	{
		enc_msg[i] = tmp[i];
	}

	for (int i = 0; i<128; i++)
	{
		tmp[i] = enc_msg[i] ^ key2[i];
	}

	//tmp == Enc_extrastring
	for (int i = 128; i<256; i++)
	{
		tmp[i] = tmp[i - 128] ^ es[i - 128];
	}

	for (int i = 0; i<128; i++)
	{
		s[i] = enc_msg[i];
	}

	for (int i = 128; i<256; i++)
	{
		s[i] = tmp[i];
	}
}

void decrypt(char *s, int len)
{
	char tmp[256];
	char enc_msg[128];
	char enc_ext[128];

	for (int i = 0; i<128; i++)
	{
		enc_msg[i] = s[i];
	}

	for (int i = 128; i<256; i++)
	{
		enc_ext[i - 128] = s[i];
	}

	for (int i = 0; i<128; i++)
	{
		tmp[i] = enc_msg[i] ^ key2[i];
	}

	//tmp == enc_msg[i] ^ key2[i]
	for (int i = 0; i<128; i++)
	{
		tmp[i] = tmp[i] ^ enc_ext[i];
	}

	//tmp == ext
	for (int i = 0; i<128; i++)
	{
		tmp[i] = tmp[i] ^ key1[i];
	}

	for (int i = 0; i<128; i++)
	{
		s[i] = enc_msg[i] ^ tmp[i];
	}
}

int _validate()
{
	char str[256];
	char random_str[128];

	int pass_len = 0;

	srand(time(NULL));

	memset(str, 1, sizeof(str));

	scanf("%s", str);
	pass_len = strlen(str);

	for (int i = 0; i<128; i++)
	{
		random_str[i] = rand() % 128;
	}

	crypt(str, random_str, pass_len);

	printf("\nEnc STR\n");
	for (int i = 0; i<256; i++)
	{
		printf("%d ", str[i]);
	}
	printf("\n\n");

	decrypt(str, pass_len);

	printf("DEC STR\n%s", str);

	return 0;
}